# -*- coding: utf-8 -*-
"""전공간유사도.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ni9ZKPF7cCNaMpP8dg4Of6U_wrQLNGFH
"""

!pip install konlpy

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#전공데이터셋을 받아옵니다
data = pd.read_csv('/content/drive/MyDrive/rapa/융합프로젝트/전공데이터.csv', low_memory=False)
data.head(2)

from konlpy.tag import Okt
okt = Okt()
# =======================================================    
# 형태소(POS)가 명사,동사,알파벳,숫자에 해당되는 단어 추출
# 정규화(normalization) 어간추출(stemming) 처리
# =======================================================    
def tokenizer(raw_texts, pos=["Noun","Alpha","Verb","Number"], stopword=[]):
    p = okt.pos(raw_texts, 
            norm=True,   # 정규화(normalization)
            stem=True    # 어간추출(stemming)
            )
    o = [word for word, tag in p if len(word) > 1 and tag in pos and word not in stopword]
    return(o)

tokenizer( data['커리큘럼'][0])

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf_vectorize = TfidfVectorizer(
    tokenizer=tokenizer, # 문장에 대한 tokenizer (위에 정의한 함수 이용)
    min_df=1,            # 단어가 출현하는 최소 문서의 개수
    sublinear_tf=True    # tf값에 1+log(tf)를 적용하여 tf값이 무한정 커지는 것을 막음
)

tfidf_matrix = tfidf_vectorize.fit_transform(data['커리큘럼'])

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
print('코사인 유사도 연산 결과 :',cosine_sim.shape)

#기존 데이터프레임으로부터 전공의 이름을 key, 전공의 인덱스를 value로 하는 딕셔너리 title_to_index를 만들어둡니다.
title_to_index = dict(zip(data['학부/학과명'], data.index))

# 전공명 의 인덱스를 리턴
idx = title_to_index['컴퓨터공학부']
print(idx)

X#선택한 전공명을 입력하면 코사인 유사도를 통해 가장 커리큘럼이 유사한 10개의 학과를 찾아내는 함수를 만듭니다.
def get_recommendations(major, cosine_sim=cosine_sim):
    # 선택한 전공명으로부터 해당 전공의 인덱스를 받아온다.
    idx = title_to_index[major]

    # 해당 전공과 모든 전공과의 유사도를 가져온다.
    sim_scores = list(enumerate(cosine_sim[idx]))

    # 유사도에 따라 전공들을 정렬한다.
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # 가장 유사한 10개의 전공들을 받아온다.
    sim_scores = sim_scores[1:11]

    # 가장 유사한 10개의 전공의 인덱스를 얻는다.
    major_indices = [idx[0] for idx in sim_scores]

    # 가장 유사한 10개의 전공의 이름을 리턴한다.
    return data['학부/학과명'].iloc[major_indices]

#전공 시각디자인학전공과 유사한 전공들을 찾아보겠습니다.

get_recommendations('시각디자인학전공')

#전공 미래모빌리티학과와 유사한 전공들을 찾아보겠습니다.

get_recommendations('미래모빌리티학과')

